// /src/utils/generarChecklistPDF.js
import pdfMake from "pdfmake/build/pdfmake";
import pdfFonts from "pdfmake/build/vfs_fonts";
pdfMake.vfs = pdfFonts.pdfMake.vfs;

export function generarChecklistPDF(data) {
    const { cliente, tecnico, fecha, respuestas, firma_base64 } = data;

    const blocks = {
        '1': 'SITUACIÓN DE PRUEBAS',
        '2': 'ALIMENTACIÓN DEL SISTEMA',
        '3': 'CENTRAL DE INTRUSIÓN',
        '4': 'TECLADOS',
        '5': 'DETECTORES',
        '6': 'COMUNICACIONES',
        '7': 'CCTV',
    };

    const content = [
        { text: 'Checklist de Seguridad', style: 'header' },
        { text: `Cliente: ${cliente}\nTécnico: ${tecnico}\nFecha: ${fecha}`, margin: [0, 10, 0, 20] },
    ];

    Object.keys(blocks).forEach(bloqueId => {
        content.push({ text: `${bloqueId} - ${blocks[bloqueId]}`, style: 'subheader' });
        const rows = respuestas
            .filter(r => r.bloque_id === bloqueId)
            .map(r => {
                return [
                    { text: r.pregunta_texto },
                    { text: r.respuesta.toUpperCase() },
                    { text: r.observaciones || '' },
                ];
            });

        if (rows.length) {
            content.push({
                style: 'tableExample',
                table: {
                    widths: ['*', 'auto', '*'],
                    body: [['Pregunta', 'Respuesta', 'Observaciones'], ...rows],
                },
            });
        }

        const fotosBloque = respuestas.filter(r => r.bloque_id === bloqueId && r.fotos && r.fotos.length);
        fotosBloque.forEach(r => {
            r.fotos.forEach(base64 => {
                content.push({ image: base64, width: 150, margin: [0, 5, 0, 10] });
            });
        });
    });

    content.push({ text: 'Firma del técnico:', margin: [0, 30, 0, 10] });
    if (firma_base64) {
        content.push({ image: firma_base64, width: 200 });
    }

    const docDefinition = {
        pageSize: 'A4',
        pageMargins: [40, 60, 40, 60],
        content,
        styles: {
            header: { fontSize: 18, bold: true, alignment: 'center', margin: [0, 0, 0, 10] },
            subheader: { fontSize: 14, bold: true, margin: [0, 10, 0, 5] },
            tableExample: { margin: [0, 5, 0, 15] },
        },
    };

    pdfMake.createPdf(docDefinition).download(`Checklist-${cliente}-${fecha}.pdf`);
}

// /src/App.jsx
import { generarChecklistPDF } from './utils/generarChecklistPDF';
import './App.css';

function App() {
  const handleGenerate = () => {
    generarChecklistPDF({
      cliente: 'Cliente Demo',
      tecnico: 'Técnico Demo',
      fecha: '2025-07-20',
      respuestas: [
        {
          bloque_id: '1',
          pregunta_texto: 'Pregunta de prueba 1',
          respuesta: 'si',
          observaciones: 'Observación prueba 1',
          fotos: [],
        },
        {
          bloque_id: '2',
          pregunta_texto: 'Pregunta de prueba 2',
          respuesta: 'no',
          observaciones: '',
          fotos: [],
        },
      ],
      firma_base64: '', // Imagen en base64 si la tienes
    });
  };

  return (
    <div className="App">
      <h1>Generador de PDF Checklist</h1>
      <button onClick={handleGenerate}>Generar PDF de prueba</button>
    </div>
  );
}

export default App;

// /src/main.jsx
import React from 'react'
import ReactDOM from 'react-dom/client'
import App from './App.jsx'
import './index.css'

ReactDOM.createRoot(document.getElementById('root')).render(
  <React.StrictMode>
    <App />
  </React.StrictMode>,
)

// /index.html
<!doctype html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <link rel="icon" type="image/svg+xml" href="/vite.svg" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Checklist PDF Generator</title>
  </head>
  <body>
    <div id="root"></div>
    <script type="module" src="/src/main.jsx"></script>
  </body>
</html>
